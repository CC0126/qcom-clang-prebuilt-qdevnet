The following are the changes in the 10.0.7 release of the Snapdragon LLVM
ARM C/C++ Toolchain over the 10.0 release.

1.  Fix corner case in auto-vectorizer
2.  Update YAMLMapParser.py to be Python 3 compatible
3.  Enable errno to be used in Baremetal context
4.  Fix non-determinism in tail duplication optimization pass
5.  Prevent lld from discarding notes in comdat
6.  Fix corner case assertion in auto-vectorizer in ARM 32 path
7.  Bring in fixes from llvm.org for unaligned memory access under
    -mstrict-align
8.  Cherry-Pick Google patch for R_ARM_NONE relocations for exception
    unwinding
9.  Disable Cortex fix for partial linking
10. Handle missed cases in Auto-Vectorizer parallel code generation
11. Match SDLLVM behavior with AOSP LLVM LLD
12. Fix corner case linkerscript issue when ALIGN is specified for the output
    section

This is the release of Snapdragon LLVM ARM C/C++ compiler toolchain version
10.0. This is a cross toolchain built to run on x86 64-bit Ubuntu Linux
(versions 14.04 and later) and Windows platform (Windows 7 64-bit and later).
The Snapdragon LLVM ARM Compiler will generate code for ARM and X86 targets 
and will not generate code for any of the other targets supported by the
llvm.org compiler.

Version 10.0 of the Snapdragon LLVM ARM toolchain includes all changes in the
llvm.org 9.0 mainline as of 1/16/2020 (llvm.org 10.0 branch point). The 
Snapdragon LLVM ARM toolchain 10.0 release includes proprietary features and 
optimizations that are not available in the llvm.org 9.0 mainline. The release
notes for the llvm.org 10.0 release are available using the link below and 
includes information about new warnings and new features.

https://releases.llvm.org/10.0.0/tools/lld/docs/ReleaseNotes.html

The Snapdragon LLVM ARM Compiler uses the integrated assembler for assembling
and includes a full featured proprietary linker (QC Linker) for linking.

The Snapdragon LLVM ARM 10.0 toolchain contains all the above features, and 
additionally contains the following key features compared to the Snapdragon
LLVM ARM 8.0 toolchain:

1. Auto-Vectorization performance improvements for image processing
2. Code size improvements for Baremetal images
3. X86 code generation
4. Performance tuning of optimizations, such as the unroller for Baremetal 
   workloads
5. Code size tuning for Android-Go images
6. Support for structured exception handling (SEH) for ARM 64-bit targets

The complete Compiler User Guide for this release of the Snapdragon LLVM ARM
Compiler is available as part of this download package under
llvm-Snapdragon_LLVM_for_Android_10.0/prebuilt/<platform>/Snapdragon
_LLVM_ARM_100_Compiler_User_Guide.pdf.

Please post all questions about this release to
http://developer.qualcomm.com/llvm-forum.

Basic Usage & Examples:

clang and clang++ are the C and C++ drivers respectively of Snapdragon
LLVM ARM Compiler. They require users to specify the assembler and linker
explicitly.

For Windows:

In order to use the drivers you need to specify a Windows version of the GCC
cross toolchain as the sysroot.

To invoke the compiler from a Windows command prompt:

set PATH=<path-to-compiler-bin>;<path-to-sysroot-bin>;%PATH%

clang.exe -mfloat-abi=softfp --sysroot=<path/to/sysroot> foo.c

NOTE:
On Windows, the LTO feature can only be used with the QC linker (ld.qcld).
It cannot be used with the gold linker plugin since the plugin is not
available for Windows platform.

For Linux:

Note that the Linux version of clang is built with support for using GCC 4.9.0
sysroot by default. Users can use a different sysroot (such as GCC-4.8 
sysroot) by using the --sysroot option as described in section 4.5 of the 
Snapdragon LLVM ARM Compiler User Guide.

Examples of clang driver usage on Linux:
clang -march=armv7-a -mfloat-abi=softfp -mfpu=neon -O3 -o foo foo.c
clang++ -mcpu=krait -mfloat-abi=softfp -mfpu=neon -Os -mthumb -o bar bar.cpp
clang++ -mcpu=krait -mfloat-abi=softfp -mfpu=neon \
--sysroot=</path/to/another-gcc-sysroot> -Ofast -c test.cpp

For Android:

For generating executables that can be executed on ARM Linux and Android
environment, we recommend using -static linker flag to enable generation of
static executables which do not have dependence on runtime OS libraries.

Options:

To find out the most common options, please pass the -help flag to the clang
driver. This will report the Snapdragon LLVM ARM specific options and
general ARM options first, before listing target independent options
available in the Snapdragon LLVM ARM Compiler.

Compiler options for best performance:

For 64-bit applications, we recommend using "-Ofast -mcpu=cortex-a57" options
for best performance on Kryo and Cortex-a57 cores, and "-Ofast
-mcpu=cortex-a53" for best performance on Cortex-a53 cores.

For 32-bit, we recommend using the "-Ofast -mcpu=krait" options for best
performance of your application on Krait cores. For non-Krait 32-bit cores, we
recommend using the "-Ofast" option. If you would like to avoid the generation
of Krait specific instructions (hardware divide, fused-mac) to enable running
on a variety of ARMv7 cores, but still optimize for best performance on Krait
cores, we recommend the "-Ofast -march=armv7-a -mfpu=neon" options.

The -Ofast option enables several high performance optimizations such as
Auto-vectorizer. Please refer to section 4.3.19 of the Snapdragon LLVM ARM
Compiler User Guide for more details.

Compiler options for smallest code-size:

We recommending using the "-Osize -mthumb" options to generate the most
compact code with the Snapdragon LLVM ARM 8.0 compiler. Please refer to
section 4.3.19 of the Snapdragon LLVM ARM Compiler User Guide for more details
on the -Osize optimization level.

Compiling for AArch64:
To compile for AArch64 (ARMv8 64-bit mode), please pass the following option
to clang:
 -target aarch64-linux-gnu

Compiling for AArch32:
To compile for AArch32, please pass the following option to clang:
 -target armv8-linux-gnueabi

Note that even though AArch32 ISA is fully backward compatible with ARMv7 ISA,
there are newer instructions in AArch32 ISA compared to ARMv7 ISA.
This means that AArch32 executables cannot be executed on ARMv7 cores such
as Krait.

Please refer to section 4.3.19 of the Snapdragon LLVM ARM Compiler User Guide
to learn about various optimization flags.

LLVM's Support for GCC command line options:

Most of the commonly used GCC options are supported by LLVM as well. A
detailed list of options supported is listed in section 4 of the Snapdragon
LLVM ARM Compiler User Guide.